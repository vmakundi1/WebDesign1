html {
    color: #222;
    font-size: 0.625rem;
    line-height: 1.5;
    font-family: 'Roboto Condensed', sans-serif;
    box-sizing: border-box;
}
*, *:before, *:after {box-sizing: border-box;}

/* why give it minimum height? so that it can fit into one page??? */
main{min-height: 200px;
    background-color: #f8f2f2;
    padding: 4% 14%;
}

header{margin-bottom: 3rem; }

h1{
    text-align: center;
    font-size:6.4rem;;
}

h2 { font-size: 2.4rem;
     border-bottom: 0.5rem inset #fff;
     margin-bottom: 1.2rem;
}
/* Remember, we used the span for our hints */
span {font-size: 1.2rem;
      display: flex;
      justify-content: flex-end; /* if we want for the hint to appear on right side? */
      }
fieldset {
/*    margin-bottom: 3rem;*/
    border:0;
    margin:0;
    padding:0;
}


body{
    font-size:1.8rem;
}

.container{
    margin:0 auto;
    width: 120rem;
}
.flex-container{
    display: flex;
    flex-direction: column;
}
form{
    margin: auto;
    border: 2px solid black;
    padding: 4%;
    width: 100%;
}

form div, fieldset{
    margin-bottom: 3rem;
}
/* we need to style labels */
/* 1.6/1.5? what does it mean? */
label{
    display: block;
    margin-bottom: 1rem;
    font: 1.6rem/1.5 georgia, serif;
}

input, select{
    display: block;
    width: 60rem;
    padding:1rem;
}

fieldset div{
    display: flex;
    justify-content: flex-start;
    margin-bottom: 0.5rem;
}

legend{
    margin-bottom: 1rem;
}

input[type=radio],
input[type=checkbox]{
    width: initial;
    margin-right: 1rem;
}

input[type="color"]{
    width: 6rem;
    padding: initial;
}

textarea{
    resize: none;
    width: 100%;
    height: 8rem;
/*     min-width: 60rem;
    max-width: 60rem;
    min-height: 30rem;
    max-height: 30rem; */
}

::placeholder {color: #0000ff;}

input[type=submit]:hover,
input[type=submit]:focus{
    background: darkred;
}









/* ==========================================================================
   Helper classes
   ========================================================================== */

/*
 * Hide visually and from screen readers
 */

.hidden {
    display: none !important;
}

/*
 * Hide only visually, but have it available for screen readers:
 * http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 */

.visuallyhidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

/*
 * Extends the .visuallyhidden class to allow the element
 * to be focusable when navigated to via the keyboard:
 * https://www.drupal.org/node/897638
 */

.visuallyhidden.focusable:active,
.visuallyhidden.focusable:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
}

/*
 * Hide visually and from screen readers, but maintain layout
 */

.invisible {
    visibility: hidden;
}

/*
 * Clearfix: contain floats
 *
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that receive the `clearfix` class.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */

.clearfix:before,
.clearfix:after {
    content: " "; /* 1 */
    display: table; /* 2 */
}

.clearfix:after {
    clear: both;
}

